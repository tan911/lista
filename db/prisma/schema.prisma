// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CreditStatus {
  pending
  paid
}

enum TransactionType {
  credit
  cash
}

// Users (Store Owner)
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  customers     Customer[]
  transactions  Transaction[]
  products      Product[]
  credits       Credit[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Customers (User's Customer)
model Customer {
  id            String        @id @default(cuid())
  name          String
  contactInfo   String?
  email         String // need migration
  creditBalance Float         @default(0)
  userId        String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  credits       Credit[]
}

model Product {
  id               String            @id @default(cuid())
  name             String
  description      String?
  price            Float
  stockQuantity    Int
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]
}

model Transaction {
  id               String            @id @default(cuid())
  transactionType  TransactionType   @default(credit)
  totalAmount      Float             @default(0)
  date             DateTime          @default(now())
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  customerId       String
  customer         Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]
}

model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  price         Float
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Credit {
  id         String       @id @default(cuid())
  amount     Float
  dueDate    DateTime
  status     CreditStatus @default(pending)
  customerId String
  customer   Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  userId     String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}
